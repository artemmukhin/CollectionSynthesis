* Стандартные типы:
Number <- Int, Float
String
Bool

*** Внешние коллекции ***

* Collection<T>
map             :: (T -> T) -> Collection<T> -> Collection<T>
filter          :: (T -> Bool) -> Collection<T> -> Collection<T>
size            :: Collection<T> -> Int
maximize        :: (T -> Number) -> T
minimize        :: (T -> Number) -> T

* IndexedCollection<T>
map             :: (T -> T) -> IndexedCollection<T> -> IndexedCollection<T>
filter          :: (T -> Bool) -> IndexedCollection<T> -> IndexedCollection<T>
size            :: IndexedCollection<T> -> Int
maximize        :: (T -> Number) -> T
minimize        :: (T -> Number) -> T
get             :: Int -> IndexedCollection<T> -> T
foldl           :: (T' -> T -> T') -> T' -> T -> T'


*** Внутренние коллекции ***

length xs       = foldl (\counter _ -> counter+1) 0 xs
safeHead xs     = if length xs > 0 then Some (head xs) else None

** Basic **

* List<T>
List.build      :: [T] -> List<T>                               
List.head       :: List<T> -> T                                                         O(1)
List.tail       :: List<T> -> List<T>                                                   O(1)
List.last       :: List<T> -> T                                                         O(1)
List.map        :: (T -> T') -> List<T> -> List<T'>                                     O(n)
List.filter     :: (T -> Bool) -> List<T> -> List<T>                                    O(n)
List.sort       :: (T -> T -> Bool) -> List<T> -> List<T>                               O(n * log n)
List.size       :: List<T> -> Int                                                       O(1)
List.maximize   :: (T -> Number) -> List<T> -> T                                        O(n)
List.minimize   :: (T -> Number) -> List<T> -> T                                        O(n)
List.find       :: (T -> Bool) -> List<T> -> Maybe T                                    O(n)
List.add        :: T -> List<T> -> List<T>                                              O(1)
List.concat     :: List<T> -> List<T> -> List<T>                                        O(1)

List.build xs           ~ xs
List.head xs            ~ head xs
List.tail xs            ~ tail xs
List.last xs            ~ last xs
List.map f xs           ~ map f xs
List.filter p xs        ~ filter p xs
List.sort comp xs       ~ sort comp xs
List.size xs            ~ length xs
List.maximize f xs      ~ foldl (\x y -> if (f x) > (f y) then x else y) (head xs) xs
List.maximize f xs      ~ foldl (\x y -> if (f x) < (f y) then x else y) (head xs) xs
List.find p xs          ~ safeHead (filter p xs)


* Array<T>
Array.build     :: [T] -> Array<T>
Array.map       :: (T -> T') -> Array<T> -> Array<T'>                                   O(n)
Array.size      :: Array<T> -> Int                                                      O(1)
Array.get       :: Int -> Array<T> -> T                                                 O(1)
Array.set       :: Int -> T -> Array<T> -> Array<T>                                     O(1)

Array.build xs          ~ foldl (\arr x -> (x, length arr):arr) [] xs
Array.map f xs          ~ map (\(x,i) -> (f x, i)) xs
Array.size xs           ~ length xs
Array.get ind xs        ~ head (filter (\(_, i) -> i == ind) xs)
Array.set ind val xs    ~ map (\(x, i) -> if i == ind then (val, i) else (x, i)) xs


* typeclass Set<T>            
Set.build       :: [T] -> Set<T>
Set.filter      :: (T -> Bool) -> Set<T> -> Set<T>
Set.size        :: Set<T> -> Int
Set.find        :: T -> Set<T> -> Maybe T
Set.contains    :: T -> Set<T> -> Bool
Set.maximize    :: (T -> Number) -> Set<T> -> T
Set.minimize    :: (T -> Number) -> Set<T> -> T
Set.add         :: T -> Set<T> -> Set<T>
Set.union       :: Set<T> -> Set<T> -> Set<T>

Set.build xs            ~ foldl (\set x -> if !(Set.contains x set) then x:set else set) [] xs
Set.filter p xs         ~ filter p xs
Set.size xs             ~ length xs
Set.find elem xs        ~ safeHead (filter (\x -> x == elem) xs)
Set.contains elem xs    ~ (length (filter (\x -> x == elem) xs)) > 0
Set.maximize f xs       ~ foldl (\x y -> if (f x) > (f y) then x else y) (head xs) xs
Set.minimize f xs       ~ foldl (\x y -> if (f x) < (f y) then x else y) (head xs) xs
Set.add x xs            ~ if !(Set.contains x xs) then x:xs else xs


* typeclass Map<K, V, (K -> V)>
Map.build           :: (K -> V) -> [K] -> Map<K, V>
Map.filterK         :: (K -> Bool) -> Map<K, V> -> Map<K, V>
Map.filterV         :: (V -> Bool) -> Map<K, V> -> Map<K, V>
Map.size            :: Map<K, V> -> Int
Map.containsK       :: K -> Map<K, V> -> Bool
Map.containsV       :: V -> Map<K, V> -> Bool
Map.get             :: K -> Map<K, V> -> V
Map.set             :: K -> V -> Map<K, V> -> Map<K, V>
Map.add             :: K -> V -> Map<K, V> -> Map<K, V>

Map.build f ks          ~ map (\k -> (k, f k)) ks
Map.filterK p xs        ~ foldl (\newMap (k,v) -> if (p k) then (k,v):newMap else newMap) [] xs
Map.filterV p xs        ~ foldl (\newMap (k,v) -> if (p v) then (k,v):newMap else newMap) [] xs
Map.size xs             ~ length xs
Map.containsK key xs    ~ (length (filter (\(k,v) -> k == key) xs)) > 0
Map.containsV val xs    ~ (length (filter (\(k,v) -> v == val) xs)) > 0
Map.get key xs          ~ snd ( safeHead (filter (\(k, _) -> k == key) xs) )
Map.set key val xs      ~ map (\(k,v) -> if k == key then (k,val) else (k,v)) xs
Map.add key val xs      ~ if !(Map.containsK key xs) then (key,val):xs else xs




** Other **

* SqrtDecArray<T, assoc (T -> T -> T')>
SqrtDecArray.build  :: (T -> T') -> Array<T> -> SqrtDecArray<T>     O(n)
SqrtDecArray.eval   :: Int -> Int -> T'                             O(sqrt n)
SqrtDecArray.get    :: Int -> T                                     O(1)
SqrtDecArray.set    :: Int -> T -> SqrtDecArray<T>                  O(1) / O(n)  (comm invert?)


* FenwickTree<T, assoc comm invert (T -> T')>
FenwickTree.build   :: (T -> T') -> Array<T> -> FenwickTree<T>      O(n * log n)
FenwickTree.eval    :: Int -> Int -> T'                             O(log n)
FenwickTree.get     :: Int -> T                                     O(1)
FenwickTree.set     :: Int -> FenwickTree<T>                        O(log n)

* HashSet<T>  <:  Set<T>
HashSet.build       :: [T] -> HashSet<T>
HashSet.filter      :: (T -> Bool) -> HashSet<T> -> HashSet<T>      O(n)
HashSet.size        :: HashSet<T> -> Int                            O(1)
HashSet.find        :: T -> HashSet<T>                              O(1)
HashSet.contains    :: T -> HashSet<T> -> Bool                      O(1)
HashSet.maximize    :: (T -> Number) -> HashSet<T> -> T             O(n)
HashSet.minimize    :: (T -> Number) -> HashSet<T> -> T             O(n)
HashSet.add         :: T -> HashSet<T> -> HashSet<T>                
HashSet.union       :: HashSet<T> -> HashSet<T> -> HashSet<T>       O(n)

* TreeSet<T>  <:  Set<T>
TreeSet.build       :: [T] -> TreeSet<T>
TreeSet.filter      :: (T -> Bool) -> TreeSet<T> -> TreeSet<T>      
TreeSet.size        :: TreeSet<T> -> Int                            O(1)
TreeSet.find        :: T -> TreeSet<T> -> Maybe T                   O(log n)
TreeSet.contains    :: T -> TreeSet<T> -> Bool                      O(log n)
TreeSet.maximize    :: (T -> Number) -> TreeSet<T> -> T             O(log n)
TreeSet.minimize    :: (T -> Number) -> TreeSet<T> -> T             O(log n)
TreeSet.add         :: T -> TreeSet<T> -> TreeSet<T>


* HashMap<K, V, (K -> V)>

* TreeMap<K, V, (K -> V)>

* PriorityQueue<T, (T -> Number)>
PriorityQueue.build      :: (T -> Number) -> [T] ->  PriorityQueue<T>
PriorityQueue.pop        :: PriorityQueue<T> -> PriorityQueue<T>
PriorityQueue.push       :: T -> PriorityQueue<T> -> PriorityQueue<T>
PriorityQueue.size       :: PriorityQueue<T> -> Int

* BinaryTree<T, (T -> Number)>
BinaryTree.build    :: (T -> Number) -> [T] -> BinaryTree<T>
BinaryTree.add      :: T -> BinaryTree<T> -> BinaryTree<T>
BinaryTree.remove   :: T -> BinaryTree<T> -> BinaryTree<T>
BinaryTree.contains :: T -> BinaryTree<T> -> Bool
BinaryTree.minimize :: BinaryTree<T> -> T
BinaryTree.maximize :: BinaryTree<T> -> T