2
Моя работа носит скорее теоретический характер. Она относится к области синтеза программ. Синтез программ - это задача автоматического поиска программы, удовлетворяющей некоторым ограничениям, которые задает пользователь. В отличие от трансляторов, синтезаторы осуществляют поиск требуемой программы в пространстве всех возможных программ, а не просто переводят программу с одного языка на другой. Ограничения на программу могут быть спецификацией на некотором промежуточном языке, примерами ввода-вывода, описанием на естественном языке и т.д.
Синтезатор структур данных - это инструмент, позволяющий получить реализацию автоматически сконструированной структуры данных.

3
Во многих программах используются специальные структуры данных, не содержащиеся явно в стандартных библиотеках языков программирования. Таковыми являются структуры, составленные из известных коллекций с помощью композиции или изменения некоторых свойств. Реализация таких структур - монотонная и сложная работа, в ходе которой зачастую возникают ошибки как на этапе подбора оптимальных структур, так и на этапе реализации. Поэтому программистам был бы полезен инструмент, позволяющий по короткой декларативной спецификации автоматически получить исходный код оптимальной и корректной реализации структуры данных.

4
Рассмотрим пример задачи, пригодной для синтеза. Пусть программисту нужна структура данных для хранения графа и быстрым ответом на вопрос "Какие ребра инцидентны данной вершине?". Спецификация данной задачи показана на слайде.

5
У этой задачи существует несколько возможных решений. Одно из оптимальных - использовать две хэш-таблицы.

6
После подбора оптимальной структуры данных синтезатор генерирует код её реализации на каком-то языке программирования, например на Java.

7
В последние годы было предпринято несколько попыток создать синтезаторы структур данных. Однако существующие синтезаторы еще далеки от совершенства. Поэтому усовершенствование текущих подходов к синтезу структур данных является актуальной проблемой.
Одна из самых успешных попыток была предпринята группой исследователей из университета Вашингтона в Сиэтле. Их инструмент Cozy позволяет синтезировать коллекции с довольно простыми запросами-фильтрациями. Cozy в том числе может решить рассмотренную выше задачу о графе. Однако область применения этого синтезатора очень узка.

8
Целью данной работы является создание синтезатора структур данных. Для этого были поставлены следующие задачи:
* спроектировать декларативный язык спецификации структур данных, достаточно мощный для описания нетривиальных задач;
* разработать алгоритм синтеза структур данных;
* разработать прототип ядра синтезатора (ядро - это часть синтезатора, которая принимает спецификацию и подбирает оптимальные коллекции; помимо ядра в синтезаторе будет присутствовать генератор кода, которым занимается мой коллега Андрей Райский из 341 группы)

9
Для создания синтезатора сначала необходимо зафиксировать множество структур данных, которые он потенциально будет поддерживать. Таковыми являются: список, хэш-таблица и другие стандартные коллекции, а также некоторые нестандартные: дерево отрезков, корневая декомпозиция и некоторые другие. Все эти структуры данных удобно описывать как совокупности функций над этими коллекциями. Для отсечения заведомо некорректных программ мы типизируем эти методы как показано на слайде.

10
Все коллекции в некотором приближении можно представлять как списки, а операции над коллекциями - как преобразования списков. Например, хэш-таблицу можно представлять как список пар (ключ, значение). Преобразования списков выражаются через комбинаторы filter, map и fold. Самый сложный из этих комбинаторов -  fold. В данной работе я ограничиваюсь только filter и map. Поэтому многие нетривиальные операции над коллекциями остаются за рамками данной работы.
Композиции filter и map можно выразить через mapFilter. Таким образом вводится редукция цепочки преобразований к одному mapFilter.
Задача синтезатора: подобрать решение в терминах коллекций и верифицировать его. Для этго все операции над коллекциями переписываются в mapFilter.

11
Предположим, что синтезатору нужно было создать функцию для поиска ребер с данной входной вершиной. Пусть имеется представленное на слайде решение. В этом решении строится хэш-таблица для соответствия вершины списку ребер, выходящих из нее. Это решение редуцируется к mapFilter таким образом.

12
Для перебора и верификации программ-кандидатов можно написать собственный генератор программ. Так сделано во многих синтезаторах, в т.ч. в Cozy. Однако вместо того чтобы решать задачу с нуля, можно свести её к существующей задаче SyGuS.

13
SyGuS расшифровывается как Syntax-Guided Synthesis. Было замечено, что многие задачи синтеза можно существенно упростить, если использовать спецификации двух типов: синтаксическую и семантическую.

14
Для сведения задачи к SyGuS необходимо научиться строить спецификации обоих типов. Мною был предложен способ построения этих спецификаций. На данном слайде представлен пример построения грамматики и её дальнейшей специализации и редукции.

15
Для построения логических ограничений используется та же грамматика. Благодаря mapFilter-редукции в итоге всё сводится к проверке эквивалентности двух mapFilter: из спецификации и из программы-кандидата.
В конце SyGuS приходит к решению в терминах mapFilter, которое эквивалентно решению с использованием каких-то конкретных коллекций.

16
Для реализации прототипа ядра синтезатора был выбран язык Haskell. Парсер языка спецификаций написан с помощью парсер-комбинаторов.

17
Для языка спецификации были реализованы: pretty-printer, редукция, вывод типов и сведение к SyGuS. Также был написан конвертер программ-решений в JSON для последующей обработки генератором кода.

18
Результаты работы:
* Исследована активно развивающаяся предметная область - синтез программ
* Спроектирован язык спецификации структур данных
* Разработан алгоритм синтеза
* Разработан прототип ядра синтезатора, исходный код доступен на github

19
Основной план на будущее: добавить поддержку fold, т.к. без него невозможно выразить многие нетривиальные операции над коллекциями (например, сортировку)
Благодаря fold можно будет добавить больше структур данных.
Также, поскольку данная работа скорее теоретическая и реализован лишь прототип ядра синтезатора, необходимо соединить воедино ядро с генератором кода и сравнить полученный синтезатор с существующими.