*** graph problem from cozy ***

record Edge { src: Int, dst: Int }
graph: SetOf<Edge>
query findEdges(n: int) = filter (\e -> e.src == n || e.dst == n) graph

findEdges:
  get= "src"
  get= "dst"
  -- минимизировать время вычисления get= по нескольким полям =>
  -- подходят несколько ассоциативных коллекций по каждому из полей
  -- если поле unique, то Map<Int, Edge>
  -- иначе Map<Int, List<Edge>> aka HashTable<Int, Edge>

-------------------------------------------------------
*** top frequent word ***

record Word { value: String }
words: Collection<Word>
query count(val: String) = size (filter (\w -> w.value == val) words)
query topFrequent() =  maximize (\w -> count w.value) words

count:
  f (get=), где f :: Record -> Any
  -- минимизировать время вычисления f (get=) =>
  -- подходит Map<string, Int> (s -> f(s))

topFrequent:
  max/min (comparator), где comparator :: Record -> Number
  -- минимизировать время вычисления max (comparator) =>
  -- нужна структура, позволяющая максимизировать какую-то функцию =>
  -- какая-то приоритетная очередь

-------------------------------------------------------
*** 03A ***

record Number { unique value: Int, unique index: Int }
numbers: Collection<Number>

query swapGet(val1: Int, val2: Int) =
  abs (numbers.get("value", val1).index - numbers.get("value", val2).index)

update swapSet(v1: Int, v2: Int) =
  numbers <- numbers.set("value", val1, "index", numbers.get("value", val2))
                    .set("value", val2, "index", numbers.get("value", val1))

swapGet:
  get= "value"
  -- подходит Map<Int, Number>

swapSet:
  -- number.set(...) на низком уровне реализуется через get=,
  -- поэтому с точки зрения cost-модели set ~ get=
  get= "value"
  -- аналогично подходит Map<Int, Number>

---------------------------------------------------
*** basic-or cozy ***

record Person { age: Int, name: String }
persons: Collection<Person>

query q(minAge: int, theName: String) =
  persons
  |> filter (\p -> p.age > minAge || p.name == theName)

q:
  get> "age"
  get= "name"

Collection.union
  filter (\p -> p.age > minAge) persons
  filter (\p -> p.name == theName) persons
Collection.concat
  filter (\p -> p.age > minAge) persons                           SortedCollection<Person, (p.age)>
  filter (\p -> p.name == theName && p.age <= minAge) persons     Map<String, Sorted<Person, (p.age asc)>>

Если запрос имеет вид filter, состоящего только из ==, то оптимальное решение -- привести запрос в DNF и построить несколько Map:
filter (\r -> (r.v1 == v1 && r.v2 == v2) || (r.v3 == v3 && r.v4 == v4 && r.v5 == v5) || ...) ~
Map<Tuple(v1, v2), List<Record>>        линейный поиск (\r -> !(остальное))
Map<Tuple(v3, v4, v5), List<Record>>    линейный поиск (\r -> !(остальное))
...

filter (\r -> r.v1 == v1 && r.v2 == v2 && r.v3 < v3 && r.v4 > v4 && ...) ~
Map<Tuple(v1, v2), Sorted<Record, (...)>>   бинпоиск

filter (\r -> r.v1 < v1 || r.v2 > v2 || ...) ~
Sorted<Record, (...)>
Sorted<Record, (...)>
... (2^n)

---------------------------------------------------

record R { value1: Int, value2: Int }
records: Collection<Record>

query q(val1: Int, val2: Int) =
  numbers
  |> filter (\r -> r.value1 < val1 && r.value2 < val2)
  |> map (\r -> r.value1 * r.value2)
  |> max

q:
  get< "value1"
  get< "value2"


---------------------------------------------------

query(xs) ::=
  | xs
  | filter  (\x -> pred(x))               query(xs)
  | map     (\x -> func(x))               query(xs)
  | find    (\x -> pred(x))               query(xs)
  | foldl   (\acc x -> func(acc, x)) acc  query(xs)

func(acc, x) ::=
  | acc | x
  | {acc | 0 | 1} {+|-|*} {x | 0 | 1}
  | (func(acc, x), func(acc, x))
  | if pred(acc, x) then func(acc, x) else func(acc, x)

---------------------------------------------------
▢ △ ☆ ♢ ♤ ♧ ◎
--------------------SyGuS--------------------------
Рассмотрим задачу про граф.

record Edge { src: Int, dst: Int }
graph: SetOf<Edge>
query findEdges(n: int) = filter (\e -> e.src == n || e.dst == n) graph

Допустим, синтезатор перебирал возможные виды findEdges. Один из таких видов:
findEdges n = List.concat (▢: List) (▢: List)

Пусть ▢ были заполнены так:
let table1: Map<Int, List<Edge>> = ▢
let table2: Map<Int, List<Edge>> = ▢
findEdges n = List.concat (Map.get ☆1 table1) (Map.get ☆2 table1)

На место △ можно поставить какое-то Arith(n) (это делает SyGuS).
Теперь ▢ должны иметь следующий вид:
let table1 = Map.build (\e1 -> (▢1: Int, List.build (filter (\e2 -> △1: Bool) graph))) (filter (\e3 -> ♢1: Bool) graph)
let table2 = Map.build (\e1 -> (▢2: Int, List.build (filter (\e2 -> △2: Bool) graph))) (filter (\e3 -> ♢2: Bool) graph)

Для заполнения этих ▢ и △ используем SyGuS. Примерная спецификация (Arith и Pred задаются грамматиками):
☆1, ☆2: Int   ~ Arith(n)
▢1, ▢2: Bool  ~ Pred(n, e1.src, e1.dst)
△1, △2: Bool  ~ Pred(n, e2.src, e2.dst)
♢1, ♢2: Bool  ~ Pred(e3.src, e3.dst)

assert. forall n forall e: (e.src == n || e.dst == n) <=>
  n in (concat (find (\(k, _) -> k == ☆1) table1) (find (\(k, _) -> k == ☆2) table2))
